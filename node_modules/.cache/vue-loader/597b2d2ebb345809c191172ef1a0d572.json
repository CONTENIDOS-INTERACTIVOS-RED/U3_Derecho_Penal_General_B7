{"remainingRequest":"/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/src/views/curso/Tema2.vue?vue&type=template&id=76ba4029&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/src/views/curso/Tema2.vue","mtime":1746335386972},{"path":"/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Derecho_Penal_General_B7/U3_Derecho_Penal_General_B7/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gQ2xhc2lmaWNhY2nDs24gZGUgbGFzIHBlbmFzIHkgc3Vicm9nYWRvcyBwZW5hbGVzJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIHAubWItNCBBIGNvbnRpbnVhY2nDs24sIHNlIGV4cG9uZSB1bmEgZXhwbGljYWNpw7NuIGNsYXJhIHNvYnJlIGPDs21vIHNlIGVzdHJ1Y3R1cmFuIGxhcyBwZW5hcyBlbiBlbCBzaXN0ZW1hIHBlbmFsIGNvbG9tYmlhbm8geSBxdcOpIGFsdGVybmF0aXZhcyBjb250ZW1wbGEgbGEgbGV5IHBhcmEgZXZpdGFyIGVsIGVuY2FyY2VsYW1pZW50byBlbiBjaWVydG9zIGNhc29zLiAKCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby1zbGlkZXIubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIGZpZ3VyZQogICAgICAgICAgLnZpZGVvCiAgICAgICAgICAgIGlmcmFtZSh3aWR0aD0iNTYwIiBoZWlnaHQ9IjMxNSIgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC85Y3FMd3FXREN6cz9zaT1GMWIyTTZTbExSbkdxRmY5IiB0aXRsZT0iWW91VHViZSB2aWRlbyBwbGF5ZXIiIGZyYW1lYm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIgYWxsb3dmdWxsc2NyZWVuKQoKCiAgICAjdF8yXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4xXSBDbGFzaWZpY2FjacOzbiBkZSBsYXMgcGVuYXMKICAgIAogICAgcC5tYi00IEVsIEPDs2RpZ28gUGVuYWwgY29sb21iaWFubywgZW4gc3UgVMOtdHVsbyBJViwgZXN0YWJsZWNlIHVuYSBjbGFzaWZpY2FjacOzbiBkZXRhbGxhZGEgZGUgbGFzIHBlbmFzIGFwbGljYWJsZXMgYSBxdWllbmVzIGNvbWV0ZW4gZGVsaXRvcywgZGlmZXJlbmNpYW5kbyBlbnRyZSBwZW5hcyBwcmluY2lwYWxlcywgcGVuYXMgYWNjZXNvcmlhcyB5IHBlbmFzIHN1c3RpdHV0aXZhcy4gRXN0YSBjbGFzaWZpY2FjacOzbiBwZXJtaXRlIGFsIGp1ZXogaW1wb25lciBzYW5jaW9uZXMgcHJvcG9yY2lvbmFsZXMsIHJhem9uYWJsZXMgeSBuZWNlc2FyaWFzLCBjb25mb3JtZSBhIGxvcyBwcmluY2lwaW9zIGNvbnN0aXR1Y2lvbmFsZXMgZGUgbGVnYWxpZGFkLCBwcm9wb3JjaW9uYWxpZGFkLCByZXNvY2lhbGl6YWNpw7NuIHkgcHJldmVuY2nDs24gKEFycm95byBaYXBhdGVybyAmIEJlcmR1Z28gR8OzbWV6IGRlIGxhIFRvcnJlLCAyMDE2KS4KCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgUGVuYXMgcHJpbmNpcGFsZXMKICAgIHAubWItNSBTb24gYXF1ZWxsYXMgcXVlIHNlIGltcG9uZW4gZGUgZm9ybWEgYXV0w7Nub21hIHkgY29uc3RpdHV5ZW4gbGEgc2FuY2nDs24gY2VudHJhbCBmcmVudGUgYSBsYSBjb25kdWN0YSBwdW5pYmxlLiBTZWfDum4gZWwgYXJ0w61jdWxvIDM0IGRlbCBDw7NkaWdvIFBlbmFsLCBsYXMgcGVuYXMgcHJpbmNpcGFsZXMgc29uOgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm1iLTMubWItbGctMAogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMS5wbmciKQogICAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgICBoNSBQZW5hIHByaXZhdGl2YSBkZSBsYSBsaWJlcnRhZCAocHJpc2nDs24pCiAgICAgICAgICAgICAgcCBSZWd1bGFkYSBlbiBlbCBhcnTDrWN1bG8gMzcuIEltcGxpY2EgbGEgcmVjbHVzacOzbiBkZWwgY29uZGVuYWRvIGVuIHVuIGVzdGFibGVjaW1pZW50byBjYXJjZWxhcmlvIHBvciB1biB0aWVtcG8gZGV0ZXJtaW5hZG8sIHNlZ8O6biBsYSBncmF2ZWRhZCBkZWwgZGVsaXRvLiAKICAgICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgICAgcC5tYi0wIDxiPkVqZW1wbG86PC9iPiBFbiB1biBjYXNvIGRlIGh1cnRvIGFncmF2YWRvIGNvbiB2aW9sZW5jaWEsIGxhIHBlbmEgcG9kcsOtYSBvc2NpbGFyIGVudHJlIDYgeSAxMiBhw7FvcyBkZSBwcmlzacOzbiwgZGVwZW5kaWVuZG8gZGUgbG9zIGFncmF2YW50ZXMgbGVnYWxlcy4KICAgIAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIucC00LnAtbWQtNQogICAgICAgICAgICAuY29sLWxnLTUubWItMy5tYi1sZy0wCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8yLnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICAgIGg1IFBlbmEgcGVjdW5pYXJpYSAobXVsdGEpCiAgICAgICAgICAgICAgcCBEaXNwdWVzdGEgZW4gZWwgYXJ0w61jdWxvIDM5LiBDb25zaXN0ZSBlbiBlbCBwYWdvIGRlIHVuYSBzdW1hIGRlIGRpbmVybyBhbCBFc3RhZG8sIGVzcGVjaWFsbWVudGUgZW4gZGVsaXRvcyBkb25kZSBzZWEgcG9zaWJsZSBsYSByZXBhcmFjacOzbiBkZWwgZGHDsW8uIAogICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMgogICAgICAgICAgICAgICAgICBwLm1iLTAgPGI+RWplbXBsbzo8L2I+IEVuIGRlbGl0b3MgY29tbyBlc3RhZmEgbyBmcmF1ZGUgcHJvY2VzYWwsIHB1ZWRlIGltcG9uZXJzZSB1bmEgbXVsdGEgcXVlIHZhIGRlIHVubyBhIGNpbmN1ZW50YSBtaWwgc2FsYXJpb3MgbcOtbmltb3MgbGVnYWxlcyBtZW5zdWFsZXMgdmlnZW50ZXMsIHNlZ8O6biBsYSBncmF2ZWRhZCBkZWwgaGVjaG8geSBsYSBjYXBhY2lkYWQgZWNvbsOzbWljYSBkZWwgYXV0b3IuCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzMucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgICAgaDUgSW5oYWJpbGl0YWNpw7NuIHBhcmEgZWwgZWplcmNpY2lvIGRlIGRlcmVjaG9zIHkgZnVuY2lvbmVzIHDDumJsaWNhcwogICAgICAgICAgICAgIHAgSW1waWRlIGFsIGNvbmRlbmFkbyBlamVyY2VyIGNhcmdvcyBww7pibGljb3MgbyBwcm9mZXNpb25lcyByZWd1bGFkYXMgcG9yIGVsIEVzdGFkby4gCiAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgICAgIHAubWItMCA8Yj5FamVtcGxvOjwvYj4gVW4gZnVuY2lvbmFyaW8gY29uZGVuYWRvIHBvciBwZWN1bGFkbyBvIGNvbmN1c2nDs24gcHVlZGUgcmVjaWJpciwgYWRlbcOhcyBkZSBwcmlzacOzbiwgdW5hIGluaGFiaWxpdGFjacOzbiBwYXJhIGVqZXJjZXIgY2FyZ29zIHDDumJsaWNvcyBkdXJhbnRlIGVsIHRpZW1wbyBxdWUgZHVyZSBsYSBzYW5jacOzbiBwcmluY2lwYWwuCiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBQZW5hcyBhY2Nlc29yaWFzCiAgICAgICAgcC5tYi01IEVzdMOhbiByZWd1bGFkYXMgZW4gZWwgYXJ0w61jdWxvIDQzIGRlbCBDw7NkaWdvIFBlbmFsLiBTZSBpbXBvbmVuIGp1bnRvIGNvbiBsYSBwZW5hIHByaW5jaXBhbCB5IG5vIHRpZW5lbiBhdXRvbm9tw61hIHByb3BpYS4gU3UgZmluYWxpZGFkIGVzIHJlZm9yemFyIGxhIHBlbmEgcHJpbmNpcGFsLCBwcm90ZWdlciBhIGxhIHNvY2llZGFkIG8gYSBsYSB2w61jdGltYSB5IHByZXZlbmlyIGxhIHJlaW5jaWRlbmNpYS4gRW50cmUgZWxsYXMgc2UgZW5jdWVudHJhbjogCiAgICAKICAgICAgICAuYmctY29sb3ItMy5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwLm1iLTAgSW5oYWJpbGl0YWNpw7NuIHBhcmEgZWwgZWplcmNpY2lvIGRlIHVuYSBwcm9mZXNpw7NuLCBhcnRlIHUgb2ZpY2lvLgogICAgICAgIC5iZy1jb2xvci0xNC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwLm1iLTAgU3VzcGVuc2nDs24gZGUgbGEgbGljZW5jaWEgZGUgY29uZHVjY2nDs24uCiAgICAgICAgLmJnLWNvbG9yLTE1LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAubWItMCBQcm9oaWJpY2nDs24gZGUgYWNlcmNhcnNlIG8gY29tdW5pY2Fyc2UgY29uIGxhIHbDrWN0aW1hLgogICAgICAgIC5iZy1jb2xvci0xNi5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwLm1iLTAudGV4dC13aGl0ZSBPYmxpZ2FjacOzbiBkZSBzb21ldGVyc2UgYSB0cmF0YW1pZW50byB0ZXJhcMOpdXRpY28uIAogICAgICAgIC5iZy1jb2xvci0xNy5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwLm1iLTAudGV4dC13aGl0ZSBQcm9oaWJpY2nDs24gZGUgZWplcmNlciBsYSBwYXRyaWEgcG90ZXN0YWQsIHR1dGVsYSBvIGN1cmFkdXLDrWEuCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTYubWItNQogICAgICAucHgtNC5weC1tZC01LnB5LTQKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvLm1iLTMubWItbGctMAogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi81LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMC50ZXh0LXdoaXRlIEVqZW1wbG86IEVuIGNhc29zIGRlIHZpb2xlbmNpYSBpbnRyYWZhbWlsaWFyLCBlcyBjb23Dum4gaW1wb25lciBsYSBwcm9oaWJpY2nDs24gZGUgYWNlcmNhbWllbnRvIGEgbGEgdsOtY3RpbWEgcGFyYSBldml0YXIgbnVldmFzIGFncmVzaW9uZXMuCiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi82LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFBlbmFzIHN1c3RpdHV0aXZhcwogICAgICAgIHAgU29uIG1lZGlkYXMgcXVlIHJlZW1wbGF6YW4gbGEgZWplY3VjacOzbiBkZSBsYSBwZW5hIHByaXZhdGl2YSBkZSBsYSBsaWJlcnRhZCwgcGVybWl0aWVuZG8gc3UgY3VtcGxpbWllbnRvIGZ1ZXJhIGRlbCBlc3RhYmxlY2ltaWVudG8gY2FyY2VsYXJpbywgYmFqbyBjaWVydGFzIGNvbmRpY2lvbmVzLgogICAgICAgIHAgVW5hIGRlIGxhcyBtw6FzIHJlbGV2YW50ZXMgZXMgbGEgcHJpc2nDs24gZG9taWNpbGlhcmlhIChhcnTDrWN1bG8gMzhCLCBhZGljaW9uYWRvIHBvciBsYSBMZXkgMTcwOSBkZSAyMDE0KS4gRXN0ZSBzdWJyb2dhZG8gcGVybWl0ZSBhbCBjb25kZW5hZG8gY3VtcGxpciBsYSBwZW5hIGVuIHN1IHJlc2lkZW5jaWEgbyBlbiBvdHJvIGx1Z2FyIGF1dG9yaXphZG8sIHNpOgogICAgCiAgICAgICAgLmJnLWNvbG9yLTcucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMgogICAgICAgICAgICAgIHAubWItMCBMYSBwZW5hIGltcHVlc3RhIGVzIG1lbm9yIGEgb2NobyBhw7Fvcy4KICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgcC5tYi0wIEVsIGRlbGl0byBubyBlc3TDoSBleGNsdWlkbyBwb3IgbGV5ICh2ZXIgYXJ0w61jdWxvIDY4QSwgaW5jaXNvIDIpLgogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICBwLm1iLTAgRWwgY29uZGVuYWRvIG5vIHJlcHJlc2VudGEgcGVsaWdybyBwYXJhIGxhIHNvY2llZGFkLgogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICBwLm1iLTAgU2UgY29tcHJvbWV0ZSBhIGN1bXBsaXIgY29uZGljaW9uZXMgY29tbzoKICAgIAogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNAogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTgucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5oLTEwMAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNy5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgaDUubWItMiBQcmltZXJvCiAgICAgICAgICAgICAgcC5tYi0wIE5vIHNhbGlyIGRlbCBkb21pY2lsaW8gc2luIGF1dG9yaXphY2nDs24ganVkaWNpYWwuCgogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTgucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5oLTEwMAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNy5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgaDUubWItMiBTZWd1bmRvCiAgICAgICAgICAgICAgcC5tYi0wIFNvbWV0ZXJzZSBhIHZpZ2lsYW5jaWEgZWxlY3Ryw7NuaWNhIG8gcHJlc2VuY2lhbC4KICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci04LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzcuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIGg1Lm1iLTIgVGVyY2VybwogICAgICAgICAgICAgIHAubWItMCBObyByZWluY2lkaXIgZW4gY29uZHVjdGFzIGRlbGljdGl2YXMuCiAgICAKICAgIHAubWItNCBMYSBDb3J0ZSBDb25zdGl0dWNpb25hbCBoYSBzdWJyYXlhZG8gcXVlIGVzdGEgbWVkaWRhIGJ1c2NhIGh1bWFuaXphciBsYSBwZW5hIHkgZGVzY29uZ2VzdGlvbmFyIGVsIHNpc3RlbWEgcGVuaXRlbmNpYXJpbywgbWFudGVuaWVuZG8gc3UgZnVuY2nDs24gcHJldmVudGl2YSB5IHJlc29jaWFsaXphZG9yYSAoQXJyb3lvIFphcGF0ZXJvICYgQmVyZHVnbyBHw7NtZXogZGUgbGEgVG9ycmUsIDIwMTYpLgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci0yMC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBoNS5tYi01IEVqZW1wbG8KICAgICAgICAgIHAubWItMCBFbiBkZWxpdG9zIGRlIGNvbmR1Y2Npw7NuIGVuIGVzdGFkbyBkZSBlbWJyaWFndWV6LCBhZGVtw6FzIGRlIG90cmFzIHBlbmFzLCBlbCBqdWV6IHB1ZWRlIGltcG9uZXIgbGEgc3VzcGVuc2nDs24gZGUgbGEgbGljZW5jaWEgZGUgY29uZHVjY2nDs24gY29tbyBtZWRpZGEgcHJldmVudGl2YSB5IGFjY2Vzb3JpYS4KCiAgICAgICAgLmJnLWNvbG9yLTUucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgcC5tYi0wIExhIGNsYXNpZmljYWNpw7NuIGRlIGxhcyBwZW5hcyBwZXJtaXRlIGFsIGp1ZXogZG9zaWZpY2FyIGFkZWN1YWRhbWVudGUgbGEgc2FuY2nDs24sIHRvbWFuZG8gZW4gY3VlbnRhIG5vIHNvbG8gbGEgbmF0dXJhbGV6YSBkZWwgZGVsaXRvIHkgZWwgZGHDsW8gY2F1c2Fkbywgc2lubyB0YW1iacOpbiBsYXMgY29uZGljaW9uZXMgcGVyc29uYWxlcyBkZWwgaW5mcmFjdG9yLCBzdSBjb21wb3J0YW1pZW50byBwb3N0ZXJpb3IgYWwgaGVjaG8geSBsYSBwb3NpYmlsaWRhZCBkZSByZWluc2VyY2nDs24gc29jaWFsLgogICAgCiAgICAjdF8yXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4yXSBTdWJyb2dhZG9zIHBlbmFsZXMgeSBzdSBhcGxpY2FjacOzbgogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy0zLm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOQogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVuIGVsIERlcmVjaG8gUGVuYWwgY29sb21iaWFubywgbGEgaW1wb3NpY2nDs24gZGUgc2FuY2lvbmVzIHNlIG9yaWVudGEgbm8gc29sbyBhIGNhc3RpZ2FyIGFsIGluZnJhY3Rvciwgc2lubyB0YW1iacOpbiBhIHByZXZlbmlyIGxhIHJlaW5jaWRlbmNpYSwgcmVwYXJhciBlbCBkYcOxbyBjYXVzYWRvIHkgZmFjaWxpdGFyIGxhIHJlaW50ZWdyYWNpw7NuIHNvY2lhbCBkZWwgY29uZGVuYWRvLiBCYWpvIGxvcyBwcmluY2lwaW9zIGRlIGxlZ2FsaWRhZCwgcHJvcG9yY2lvbmFsaWRhZCB5IHJhY2lvbmFsaWRhZCwgbGEgbGV5IGNvbnRlbXBsYSBtZWNhbmlzbW9zIHF1ZSBwZXJtaXRlbiBmbGV4aWJpbGl6YXIgbGEgZWplY3VjacOzbiBkZSBsYSBwZW5hIGN1YW5kbyBzZSBjdW1wbGVuIGNpZXJ0YXMgY29uZGljaW9uZXM6IGxvcyBsbGFtYWRvcyBzdWJyb2dhZG9zIHBlbmFsZXMgKEFycm95byBaYXBhdGVybyAmIEJlcmR1Z28gR8OzbWV6IGRlIGxhIFRvcnJlLCAyMDE2KS4KICAgIAogICAgICAgIC5iZy1jb2xvci0zLnAtNShkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAubWItMCBMb3Mgc3Vicm9nYWRvcyBwZW5hbGVzIHNvbiBiZW5lZmljaW9zIGp1csOtZGljb3MgcXVlIHBlcm1pdGVuIHN1c3BlbmRlciwgc3VzdGl0dWlyIG8gaW50ZXJydW1waXIgbGEgZWplY3VjacOzbiBkZSB1bmEgcGVuYSwgc2llbXByZSBiYWpvIGNvbmRpY2lvbmVzIGxlZ2FsZXMgZXN0cmljdGFzLiBFbiBDb2xvbWJpYSwgZXN0w6FuIHJlZ3VsYWRvcyBlbnRyZSBsb3MgYXJ0w61jdWxvcyA2MyB5IDY4QSBkZWwgQ8OzZGlnbyBQZW5hbCwgeSBzdSBwcm9jZWRlbmNpYSBkZXBlbmRlIGRlIGZhY3RvcmVzLgogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgUHJpbmNpcGFsZXMgc3Vicm9nYWRvcyBwZW5hbGVzCiAgICBwIEVzdG9zIG1lY2FuaXNtb3Mgb2ZyZWNlbiBhbHRlcm5hdGl2YXMgYSBsYSBlamVjdWNpw7NuIHRvdGFsIGRlIGxhIHBlbmEsIGJham8gY29uZGljaW9uZXMgbGVnYWxlcyB5IGp1ZGljaWFsZXMgZXNwZWPDrWZpY2FzLgogICAgZGl2Lm1zLTMKICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgIGkuZmFzLmZhLWNpcmNsZS5iZy1jb2xvci0xMgogICAgICAgICAgcC5tYi0wIFN1c3BlbnNpw7NuIGNvbmRpY2lvbmFsIGRlIGxhIGVqZWN1Y2nDs24gZGUgbGEgcGVuYSAoQXJ0LiA2MyBDLlAuKQogICAgICBwIEVzdGUgYmVuZWZpY2lvIHBlcm1pdGUgcXVlIGVsIGp1ZXogc3VzcGVuZGEgbGEgZWplY3VjacOzbiBkZSBsYSBwZW5hIHBvciB1biBwZXJpb2RvIGRlIHBydWViYSwgc2llbXByZSBxdWUgZWwgY29uZGVuYWRvIGN1bXBsYSBjaWVydGFzIGNvbmRpY2lvbmVzOgogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy0zLm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci02LnRleHQtY2VudGVyLnRleHQtd2hpdGUucC00LmgtMTAwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5hbGlnbi1jb250ZW50LWNlbnRlcgogICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItMCBMYSBwZW5hIGltcHVlc3RhIG5vIGRlYmUgc3VwZXJhciBjdWF0cm8gYcOxb3MgZGUgcHJpc2nDs24uCiAgICAgIC5jb2wtbGctMy5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItMTEudGV4dC1jZW50ZXIudGV4dC13aGl0ZS5wLTQuaC0xMDAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmFsaWduLWNvbnRlbnQtY2VudGVyCiAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi0wIEVsIGNvbmRlbmFkbyBubyBkZWJlIGhhYmVyIHNpZG8gYmVuZWZpY2lhcmlvIGRlIG90cm8gc3Vicm9nYWRvIGVuIGxvcyBjaW5jbyBhw7FvcyBhbnRlcmlvcmVzLgogICAgICAuY29sLWxnLTMubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTYudGV4dC1jZW50ZXIudGV4dC13aGl0ZS5wLTQuaC0xMDAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmFsaWduLWNvbnRlbnQtY2VudGVyCiAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi0wIERlYmUgY2FyZWNlciBkZSBhbnRlY2VkZW50ZXMgcGVuYWxlcy4KICAgICAgLmNvbC1sZy0zLm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci0xMS50ZXh0LWNlbnRlci50ZXh0LXdoaXRlLnAtNC5oLTEwMChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuYWxpZ24tY29udGVudC1jZW50ZXIKICAgICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTAgRWwgZGVsaXRvIG5vIGRlYmUgZXN0YXIgZXhjbHVpZG8gcG9yIGVsIGFydMOtY3VsbyA2OEEuCiAgICAKICAgIHAubWItNCBEdXJhbnRlIGVsIHBlcmlvZG8gZGUgcHJ1ZWJhLCBlbCBjb25kZW5hZG8gZGViZSBjdW1wbGlyIG9ibGlnYWNpb25lcyBjb21vIHByZXNlbnRhcnNlIHBlcmnDs2RpY2FtZW50ZSBhbnRlIGxhIGF1dG9yaWRhZCBqdWRpY2lhbCB5IG9ic2VydmFyIGJ1ZW5hIGNvbmR1Y3RhLgoKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgLmNvbC1sZy02Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci04LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEwLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBoNS5tYi0yIFNpIGN1bXBsZQogICAgICAgICAgICAgIHAubWItMCBMYSBwZW5hIHNlIGNvbnNpZGVyYSBleHRpbmd1aWRhLgoKICAgICAgLmNvbC1sZy02Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci04LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzExLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBoNS5tYi0yIE5vIGluY3VtcGxlCiAgICAgICAgICAgICAgcC5tYi0wIFNlIHJldm9jYSBlbCBiZW5lZmljaW8geSBkZWJlIGN1bXBsaXIgbGEgcGVuYSBvcmlnaW5hbG1lbnRlIGltcHVlc3RhLgogICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEyLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExpYmVydGFkIGNvbmRpY2lvbmFsIChBcnQuIDY0IEMuUC4pCiAgICAgICAgcC5tYi0zIFByb2NlZGUgY3VhbmRvIGVsIGNvbmRlbmFkbyBoYSBjdW1wbGlkbyB0cmVzIHF1aW50YXMgcGFydGVzIGRlIGxhIHBlbmEgcHJpdmF0aXZhIGRlIGxhIGxpYmVydGFkIHkgZGVtdWVzdHJhOgogICAgCiAgICAgICAgLmJnLWNvbG9yLTIucC00Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgcC5tYi0wIEJ1ZW5hIGNvbmR1Y3RhIGR1cmFudGUgbGEgZWplY3VjacOzbiBkZSBsYSBwZW5hLgogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICBwLm1iLTAgUmVwYXJhY2nDs24gZGVsIGRhw7FvIG8gYWN1ZXJkbyBkZSBwYWdvIGNvbiBsYSB2w61jdGltYS4KICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgcC5tYi0wIEFycmFpZ28gZmFtaWxpYXIgeSBzb2NpYWwuCiAgICAgICAgcCBFc3RlIGJlbmVmaWNpbyBubyBleHRpbmd1ZSBsYSBwZW5hLCBzaW5vIHF1ZSBwZXJtaXRlIGNvbnRpbnVhciBzdSBlamVjdWNpw7NuIGVuIGxpYmVydGFkIGNvbmRpY2lvbmFsLCBiYWpvIGxhIHN1cGVydmlzacOzbiBkZWwgSU5QRUMuCiAgICAgICAgcCBObyBhcGxpY2EgcGFyYToKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci02LnRleHQtY2VudGVyLnRleHQtd2hpdGUucC00LmgtMTAwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5hbGlnbi1jb250ZW50LWNlbnRlcgogICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItMCBEZWxpdG9zIHNleHVhbGVzIGNvbnRyYSBtZW5vcmVzCiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItMTEudGV4dC1jZW50ZXIudGV4dC13aGl0ZS5wLTQuaC0xMDAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmFsaWduLWNvbnRlbnQtY2VudGVyCiAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi0wIERlbGl0b3MgZGUgbGVzYSBodW1hbmlkYWQKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci02LnRleHQtY2VudGVyLnRleHQtd2hpdGUucC00LmgtMTAwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5hbGlnbi1jb250ZW50LWNlbnRlcgogICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItMCBQZXJzb25hcyByZWluY2lkZW50ZXMKICAgIAogICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIFJlc3RyaWNjaW9uZXMgbGVnYWxlcwogICAgcC5tYi01IEVsIGFydMOtY3VsbyA2OEEgZGVsIEPDs2RpZ28gUGVuYWwgY29udGllbmUgdW5hIGxpc3RhIHRheGF0aXZhIGRlIGRlbGl0b3MgZXhjbHVpZG9zIGRlIGxvcyBzdWJyb2dhZG9zIHBlbmFsZXMuIEVzdG8gc2lnbmlmaWNhIHF1ZSwgaW5jbHVzbyBzaSBzZSBjdW1wbGVuIGxvcyBkZW3DoXMgcmVxdWlzaXRvcywgZWwgYmVuZWZpY2lvIG5vIHB1ZWRlIHNlciBvdG9yZ2FkbyBzaSBlbCBkZWxpdG8gZmlndXJhIGVudHJlIGxvcyBleHByZXNhbWVudGUgZXhjbHVpZG9zLgoKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBWYWxvcmFjacOzbiBqdWRpY2lhbCAKICAgIHAubWItNSBMYSBjb25jZXNpw7NuIGRlIHVuIHN1YnJvZ2FkbyBwZW5hbCBubyBlcyBhdXRvbcOhdGljYS4gRWwganVleiBkZWJlIGV2YWx1YXI6CgogICAgLmJnLWZ1bGwtd2lkdGguYmctcHBhbC1henVsCiAgICAgIC5weC00LnB4LW1kLTUucHktNAogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTAKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctNyhkYXRhLWFvcz0iZmFkZS1sZWZ0Iikub3JkZXItMgogICAgICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMgogICAgICAgICAgICAgICAgICAgIHAubWItMCBFbCBjdW1wbGltaWVudG8gZXN0cmljdG8gZGUgbG9zIHJlcXVpc2l0b3MgbGVnYWxlcy4KICAgICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIEVsIGdyYWRvIGRlIGN1bHBhYmlsaWRhZCBkZWwgY29uZGVuYWRvLgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgRWwgaW1wYWN0byBzb2NpYWwgZGVsIGRlbGl0by4KICAgICAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgICAgICAgcC5tYi0wIExhIHJlcGFyYWNpw7NuIGRlbCBkYcOxbyB5IGVsIGludGVyw6lzIGRlIGxhIHbDrWN0aW1hLgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgTG9zIGVmZWN0b3MgZGVsIHN1YnJvZ2FkbyBlbiBsYSBwcmV2ZW5jacOzbiBnZW5lcmFsIHkgZXNwZWNpYWwuCiAgICAgICAgICAgICAgLmNvbC1sZy01KGRhdGEtYW9zPSJ6b29tLWluIikub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICAgIGltZy5pbWctZmx1aWQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMy5zdmcnLCBzdHlsZT0ibWF4LXdpZHRoOjQ4NnB4IiwgYWx0PSIiICkubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubWItNC5tYi1sZy0wCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTE0Lm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00CiAgICAgICAgcC5tYi0wIExvcyBzdWJyb2dhZG9zIHBlbmFsZXMgcmVwcmVzZW50YW4gdW4gbWVjYW5pc21vIGNsYXZlIHBhcmEgaHVtYW5pemFyIGxhIHNhbmNpw7NuLCBwcm9tb3ZlciBsYSBqdXN0aWNpYSByZXN0YXVyYXRpdmEsIHJlZHVjaXIgbGEgc29icmVwb2JsYWNpw7NuIGNhcmNlbGFyaWEgeSBmb3J0YWxlY2VyIGxhIHJlaW50ZWdyYWNpw7NuIHNvY2lhbCBkZWwgY29uZGVuYWRvLCBzaW4gZGVqYXIgZGUgcHJvdGVnZXIgbG9zIGRlcmVjaG9zIGRlIGxhcyB2w61jdGltYXMgeSBsYSBzZWd1cmlkYWQgZGUgbGEgY29tdW5pZGFkLgogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgQ3JpdGVyaW9zIHBhcmEgZmlqYXIgbGFzIHBlbmFzLCBleGNsdXNpw7NuIGRlIGxhIHB1bmliaWxpZGFkIHkgZXh0aW5jacOzbiBkZSBsYSBhY2Npw7NuIHBlbmFsCgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5vcmRlci0yCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci03LnAtNC5tYi0zKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNS5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIEVsIERlcmVjaG8gUGVuYWwgY29sb21iaWFubywgcmVndWxhZG8gcG9yIGxhIExleSA1OTkgZGUgMjAwMCwgbm8gc2UgbGltaXRhIGEgZGVzY3JpYmlyIGxhcyBjb25kdWN0YXMgcHVuaWJsZXMgeSBzdXMgcmVzcGVjdGl2YXMgc2FuY2lvbmVzLCBzaW5vIHF1ZSB0YW1iacOpbiBlc3RhYmxlY2UgbG9zIGNyaXRlcmlvcyB5IG1lY2FuaXNtb3MgcXVlIHBlcm1pdGVuIGRvc2lmaWNhciBhZGVjdWFkYW1lbnRlIGxhIHBlbmEsIGV4Y2x1aXIgbGEgcHVuaWJpbGlkYWQgZW4gY2llcnRvcyBjYXNvcyB5IGRlY2xhcmFyIGxhIGV4dGluY2nDs24gZGUgbGEgYWNjacOzbiBwZW5hbC4gRXN0YXMgZmlndXJhcyBnYXJhbnRpemFuIHF1ZSBsYSByZXNwdWVzdGEgZGVsIEVzdGFkbyBzZWEgcmFjaW9uYWwsIGVxdWl0YXRpdmEsIHByb3BvcmNpb25hbCB5IGNvbmZvcm1lIGEgbG9zIHByaW5jaXBpb3MgZGVsIEVzdGFkbyBTb2NpYWwgZGUgRGVyZWNobyAoQ2hhdmFycm8gQ2FkZW5hLCAyMDE4KS4KICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYSBpbXBvc2ljacOzbiBkZSBsYSBwZW5hIG5vIHB1ZWRlIHNlciB1biBhY3RvIGF1dG9tw6F0aWNvIG8gcHVyYW1lbnRlIGFyaXRtw6l0aWNvLiBQb3IgZWwgY29udHJhcmlvLCByZXF1aWVyZSBkZSB1biBqdWljaW8gdmFsb3JhdGl2byBwb3IgcGFydGUgZGVsIGp1ZXosIHF1aWVuIGRlYmUgdGVuZXIgZW4gY3VlbnRhIGxhcyBjaXJjdW5zdGFuY2lhcyBkZWwgaGVjaG8sIGxhcyBjb25kaWNpb25lcyBwZXJzb25hbGVzIGRlbCBhdXRvciB5IGVsIGltcGFjdG8gc29jaWFsIGRlbCBkZWxpdG8uCiAgICAKCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0xLm1iLTUKICAgICAgLnB4LTQucHgtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctMTIKICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgIC5jb2wtbGctOShkYXRhLWFvcz0iZmFkZS1sZWZ0Iikub3JkZXItMgogICAgICAgICAgICAgICAgcCBFbCBDw7NkaWdvIFBlbmFsIGNvbnRlbXBsYToKICAgICAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgUmVnbGFzIGdlbmVyYWxlcyB5IGVzcGVjaWFsZXMgZGUgZG9zaWZpY2FjacOzbiBkZSBsYSBwZW5hLgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgQ2lyY3Vuc3RhbmNpYXMgYWdyYXZhbnRlcyAoZWouIHByZW1lZGl0YWNpw7NuLCBhYnVzbyBkZSBzdXBlcmlvcmlkYWQpIHkgYXRlbnVhbnRlcyAoZWouIGNvbGFib3JhY2nDs24gY29uIGxhIGp1c3RpY2lhLCByZXBhcmFjacOzbiBkZWwgZGHDsW8pLgogICAgICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgICAgICBwLm1iLTAgTGEgb2JsaWdhY2nDs24gZGVsIGp1ZXogZGUgYWN0dWFyIGNvbmZvcm1lIGEgbG9zIHByaW5jaXBpb3MgZGUgbGVnYWxpZGFkLCBwcm9wb3JjaW9uYWxpZGFkLCBuZWNlc2lkYWQgeSByYWNpb25hbGlkYWQuCiAgICAgICAgICAgICAgLmNvbC1sZy0zKGRhdGEtYW9zPSJ6b29tLWluIikub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgICAgIGltZy5pbWctZmx1aWQoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNi5zdmcnLCBzdHlsZT0ibWF4LXdpZHRoOjQ4NnB4IiwgYWx0PSIiICkubXgtYXV0by5teC1sZy0wLm1zLWxnLWF1dG8ubWItNC5tYi1sZy0wCiAgICAKICAgIHAubWItNCBFc3RlIGVuZm9xdWUgYnVzY2EgbG9ncmFyIHVuYSBwZW5hIGp1c3RhLCBldml0YW5kbyB0YW50byBlbCBleGNlc28gcHVuaXRpdm8gY29tbyBsYSBpbXB1bmlkYWQuCiAgICAKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQub3JkZXItMgogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTcucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgub3JkZXItMS5tYi0zLm1iLWxnLTAKICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgIGkuZmFzLmZhLWNpcmNsZS5iZy1jb2xvci0xMgogICAgICAgICAgICBwLm1iLTAgRXhjbHVzacOzbiBkZSBsYSBwdW5pYmlsaWRhZAogICAgICAgIHAgTGEgZXhjbHVzacOzbiBkZSBsYSBwdW5pYmlsaWRhZCBzZSByZWZpZXJlIGEgYXF1ZWxsYXMgc2l0dWFjaW9uZXMgZW4gbGFzIHF1ZSwgYXVuIGV4aXN0aWVuZG8gdW5hIGNvbmR1Y3RhIHTDrXBpY2EsIGFudGlqdXLDrWRpY2EgeSBjdWxwYWJsZSwgZWwgRXN0YWRvIGRlY2lkZSBubyBpbXBvbmVyIHVuYSBzYW5jacOzbiBwZW5hbC4gRXN0YSBkZWNpc2nDs24gcHVlZGUgZXN0YXIgYmFzYWRhIGVuIGNvbnNpZGVyYWNpb25lcyBkZSBwb2zDrXRpY2EgY3JpbWluYWwsIHJhem9uZXMgaHVtYW5pdGFyaWFzIG8gY29uZGljaW9uZXMgcGVyc29uYWxlcyBkZWwgYXV0b3IuCiAgICAgICAgcCBBbGd1bm9zIHN1cHVlc3RvcyBjb211bmVzIGluY2x1eWVuOgogICAgCiAgICAgICAgLmJnLWNvbG9yLTIwLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICBwLm1iLTAgQ29uY2lsaWFjacOzbiBvIGRlc2lzdGltaWVudG8gZW4gZGVsaXRvcyBxdWVyZWxsYWJsZXMuCiAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMgogICAgICAgICAgICAgIHAubWItMCBQcmVjbHVzacOzbiBkZWwgcHJvY2VzbyBwZW5hbC4KICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgcC5tYi0wIEluaW1wdXRhYmlsaWRhZCBwZXJtYW5lbnRlIChlai4gZGVtZW5jaWEpIG8gdHJhbnNpdG9yaWEgKGVqLiB0cmFzdG9ybm8gbWVudGFsIG1vbWVudMOhbmVvLCBkZWJpZGFtZW50ZSBjb21wcm9iYWRvKS4KCiAgICAgICAgLmJnLWNvbG9yLTUucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgcC5tYi0wIEVzdGFzIGNhdXNhcyBvcGVyYW4gY29tbyBsw61taXRlcyBhbCBlamVyY2ljaW8gZGVsIHBvZGVyIHB1bml0aXZvLCBlbiBjb2hlcmVuY2lhIGNvbiBsb3MgZmluZXMgcmVzb2NpYWxpemFkb3JlcyBkZWwgc2lzdGVtYSBwZW5hbC4KICAgIAogICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgaS5mYXMuZmEtY2lyY2xlLmJnLWNvbG9yLTEyCiAgICAgICAgcC5tYi0wIEV4dGluY2nDs24gZGUgbGEgYWNjacOzbiBwZW5hbAogICAgcCBMYSBleHRpbmNpw7NuIGRlIGxhIGFjY2nDs24gcGVuYWwgaW1wbGljYSBxdWUgZWwgRXN0YWRvIHBpZXJkZSBzdSBmYWN1bHRhZCBwYXJhIGludmVzdGlnYXIsIGp1emdhciBvIHNhbmNpb25hciB1biBkZWxpdG8uIEVzdGEgZmlndXJhIHRpZW5lIGNvbW8gb2JqZXRpdm8gZ2FyYW50aXphciBsYSBzZWd1cmlkYWQganVyw61kaWNhIHkgZXZpdGFyIHByb2Nlc29zIGlubmVjZXNhcmlvcyBvIGluZWZpY2FjZXMuCiAgICBwIExhcyBwcmluY2lwYWxlcyBjYXVzYXMgZGUgZXh0aW5jacOzbiBzb246CgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNAogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTgucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5oLTEwMAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTguc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBDdW1wbGltaWVudG8gdG90YWwgZGUgbGEgcGVuYS4KCiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItOC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xOC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIFByZXNjcmlwY2nDs24gZGUgbGEgYWNjacOzbiBwZW5hbCBvIGRlIGxhIHBlbmEuCiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItOC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xOC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIFBhZ28gZGUgbGEgbXVsdGEsIGN1YW5kbyBhc8OtIGxvIGRpc3BvbmUgbGEgbGV5LgogICAgCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi00CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItOC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xOC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIE11ZXJ0ZSBkZWwgaW1wdXRhZG8uCgogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTgucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5oLTEwMAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMTguc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBBbW5pc3TDrWEgbyBpbmR1bHRvIGVuIGRldGVybWluYWRvcyBjb250ZXh0b3MganVyw61kaWNvcyB5IHBvbMOtdGljb3MuCgogICAgcC5tYi01IEVzdGFzIHNpdHVhY2lvbmVzIHJlZmxlamFuIGxvcyBsw61taXRlcyB0ZW1wb3JhbGVzIHkgbWF0ZXJpYWxlcyBkZWwgcG9kZXIgcHVuaXRpdm8gZGVsIEVzdGFkbywgeSByZWZ1ZXJ6YW4gZWwgcmVzcGV0byBwb3IgbG9zIGRlcmVjaG9zIGZ1bmRhbWVudGFsZXMgZGVsIHByb2Nlc2Fkby4KCiAgICBoMi5tYi01KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBDcml0ZXJpb3MgcGFyYSBmaWphciBsYXMgcGVuYXMKICAgIAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItMy5wLTMuaC0xMDAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBMYSBkZXRlcm1pbmFjacOzbiBkZSBsYSBwZW5hIGVuIGVsIERlcmVjaG8gUGVuYWwgY29sb21iaWFubyBubyBwdWVkZSBlbnRlbmRlcnNlIGNvbW8gdW4gYWN0byBhcmJpdHJhcmlvIG5pIGF1dG9tw6F0aWNvLiBFbCBqdWV6IHBlbmFsLCBhbCBtb21lbnRvIGRlIGltcG9uZXIgdW5hIHNhbmNpw7NuLCBkZWJlIGF0ZW5kZXIgYSBjcml0ZXJpb3Mgb2JqZXRpdm9zIHkgc3ViamV0aXZvcyBlc3RhYmxlY2lkb3MgcG9yIGxhIGxleSwgcXVlIGxlIHBlcm1pdGFuIGluZGl2aWR1YWxpemFyIGxhIHBlbmEgZGUgbWFuZXJhIGp1c3RhIHkgcHJvcG9yY2lvbmFsLCBkZSBhY3VlcmRvIGNvbiBsYXMgY2FyYWN0ZXLDrXN0aWNhcyBkZWwgaGVjaG8geSBkZWwgYXV0b3IuCiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE5LnBuZyIgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTcucC0zLmgtMTAwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRXN0ZSBwcm9jZXNvIHNlIGZ1bmRhbWVudGEgZW4gbG9zIHByaW5jaXBpb3MgZGUgbGVnYWxpZGFkLCBwcm9wb3JjaW9uYWxpZGFkLCByYXpvbmFiaWxpZGFkIHkganVzdGljaWEgbWF0ZXJpYWwsIHkgc2UgZW5jdWVudHJhIHJlZ3VsYWRvIGVuIGxvcyBhcnTDrWN1bG9zIDU1IGEgNjEgZGVsIEPDs2RpZ28gUGVuYWwgY29sb21iaWFuby4KICAgICAgICAgIGZpZ3VyZS5kLWZsZXguanVzdGlmeS1jb250ZW50LWVuZAogICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8yMC5zdmciIGRhdGEtYW9zPSJ6b29tLWluIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpCiAgICAKICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNYXJjbyBsZWdhbCB5IHB1bnRvIGRlIHBhcnRpZGEKICAgIHAubWItMCBMYSBmaWphY2nDs24gZGUgbGEgcGVuYSBwYXJ0ZSBkZWwgbWFyY28gcHVuaXRpdm8gbGVnYWwgZXN0YWJsZWNpZG8gcGFyYSBjYWRhIGRlbGl0by4KICAgIHAgUG9yIGVqZW1wbG8sIGVsIGRlbGl0byBkZSBodXJ0byBzaW1wbGUgKGFydC4gMjM5IEMuUC4pIGNvbnRlbXBsYSB1bmEgcGVuYSBkZSBwcmlzacOzbiBkZSAyNCBhIDcyIG1lc2VzLiBFbCBqdWV6IGRlYmUgdWJpY2FyIGxhIHBlbmEgY29uY3JldGEgZGVudHJvIGRlIGVzZSByYW5nbyBsZWdhbCBzZWfDum46CgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctNC5vcmRlci1sZy0yLm1iLTMubWItbGctMAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMjEucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04Lm9yZGVyLWxnLTEKICAgIAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJHcmF2ZWRhZCBkZWwgaGVjaG8iKQogICAgICAgICAgICBwIEVsIGp1ZXogYW5hbGl6YSBlbCBkYcOxbyBjYXVzYWRvLCBlbCByaWVzZ28gZ2VuZXJhZG8sIGxhIGZvcm1hIGVuIHF1ZSBzZSBlamVjdXTDsyBlbCBkZWxpdG8sIGVsIHZhbG9yIGRlbCBiaWVuIGp1csOtZGljbyBhZmVjdGFkbyB5IGxhIGFmZWN0YWNpw7NuIGEgbGEgdsOtY3RpbWEuIAogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMgogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkVqZW1wbG86PC9iPiBTaSB1bmEgcGVyc29uYSBodXJ0YSB1biBjZWx1bGFyIHNpbiB2aW9sZW5jaWEgbWVkaWFudGUgZW5nYcOxbyBzaW1wbGUsIGVsIGRhw7FvIGVzIGxldmUsIGxvIHF1ZSBwdWVkZSBqdXN0aWZpY2FyIHVuYSBwZW5hIGNlcmNhbmEgYWwgbcOtbmltbyBsZWdhbCAoMjQgbWVzZXMpLgogICAgICAgICAgLmRpdih0aXR1bG89IkNpcmN1bnN0YW5jaWFzIHBlcnNvbmFsZXMgZGVsIGF1dG9yIikKICAgICAgICAgICAgcCBTZSBjb25zaWRlcmFuIGZhY3RvcmVzIGNvbW8gZWwgZ3JhZG8gZGUgY3VscGFiaWxpZGFkLCBhbnRlY2VkZW50ZXMsIG5pdmVsIGVkdWNhdGl2bywgZW50b3JubyBzb2NpYWwsIHRpcG8gZGUgaW50ZW5jacOzbiAoZG9sbyBvIGN1bHBhKSwgeSBjb29wZXJhY2nDs24gY29uIGxhIGp1c3RpY2lhLiAKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgIHAubWItMCA8Yj5FamVtcGxvOjwvYj4gVW5hIHBlcnNvbmEgc2luIGFudGVjZWRlbnRlcywgY29uIGVudG9ybm8gZmFtaWxpYXIgZXN0YWJsZSB5IHF1ZSBjb25maWVzYSBkZXNkZSBlbCBpbmljaW8gcHVlZGUgcmVjaWJpciB1bmEgcGVuYSByZWR1Y2lkYS4KICAgICAgICAgIC5kaXYodGl0dWxvPSJDaXJjdW5zdGFuY2lhcyBkZSBtYXlvciBwdW5pYmlsaWRhZCAoQXJ0LiA1OCBDLlAuKSIpCiAgICAgICAgICAgIHAgQWdyYXZhbiBsYSBwZW5hIGVsZW1lbnRvcyBjb21vOiBuw7ptZXJvIGRlIHbDrWN0aW1hcywgcHJlbWVkaXRhY2nDs24sIGFidXNvIGRlIGNvbmZpYW56YSwgbyBhcHJvdmVjaGFtaWVudG8gZGUgbGEgaW5kZWZlbnNpw7NuIGRlIGxhIHbDrWN0aW1hLiAgCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+RWplbXBsbzo8L2I+IEVuIHVuYSBlc3RhZmEgY29udHJhIGFkdWx0b3MgbWF5b3JlcywgbGEgcGVuYSBwdWVkZSBpbmNyZW1lbnRhcnNlIHBvciBhcHJvdmVjaGFyc2UgZGUgc3UgdnVsbmVyYWJpbGlkYWQuCiAgICAKICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8yMi5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgKICAgIAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJDaXJjdW5zdGFuY2lhcyBkZSBtZW5vciBwdW5pYmlsaWRhZCAoQXJ0LiA1NSBDLlAuKSIpCiAgICAgICAgICAgIHAgUGVybWl0ZW4gcmVkdWNpciBsYSBwZW5hIHNpIGVsIGF1dG9yIGFjdHXDsyBiYWpvIGFtZW5hemEsIHBvciBtb3Rpdm9zIGFsdHJ1aXN0YXMsIGNvbGFib3LDsyBjb24gbGFzIGF1dG9yaWRhZGVzIG8gbW9zdHLDsyBhcnJlcGVudGltaWVudG8uICAKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItMTIKICAgICAgICAgICAgICAgIHAubWItMCA8Yj5FamVtcGxvOjwvYj4gRW4gdW5hIHJpw7FhLCBzaSBlbCBhZ3Jlc29yIGF1eGlsaWEgYSBsYSB2w61jdGltYSB5IGNvb3BlcmEgY29uIGxhIGp1c3RpY2lhLCBwdWVkZSByZWNpYmlyIHVuYSBwZW5hIG1lbm9yIG8gYWNjZWRlciBhIHVuIHN1YnJvZ2FkbyBwZW5hbC4KICAgICAgICAgIC5kaXYodGl0dWxvPSJHcmFkbyBkZSBwYXJ0aWNpcGFjacOzbiIpCiAgICAgICAgICAgIHAgU2UgZGlmZXJlbmNpYSBlbnRyZSBlbCBhdXRvciBwcmluY2lwYWwsIGVsIGPDs21wbGljZSB5IGVsIGRldGVybWluYWRvci4gCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTEyCiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+RWplbXBsbzo8L2I+IEVuIHVuIGhvbWljaWRpbywgcXVpZW4gZGlzcGFyYSByZWNpYmUgbWF5b3Igc2FuY2nDs24gcXVlIHF1aWVuIHNvbG8gcHJlc3TDsyBlbCBhcm1hLgogICAgICAgICAgLmRpdih0aXR1bG89Ik1vZGFsaWRhZCBkZWwgZGVsaXRvOiB0ZW50YXRpdmEgbyBjb25zdW1hY2nDs24gKEFydC4gMjcgQy5QLikiKQogICAgICAgICAgICBwIFNpIGVsIGRlbGl0byBmdWUgdGVudGFkbyB5IG5vIGNvbnN1bWFkbywgbGEgcGVuYSBwdWVkZSByZWR1Y2lyc2UgaGFzdGEgZW4gdW4gNTAlLiAgIAogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci0xMgogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkVqZW1wbG86PC9iPiBTaSBhbGd1aWVuIGludGVudGEgaHVydGFyIHVuYSB0aWVuZGEgcGVybyBubyBsbyBsb2dyYSwgZWwganVleiBkZWJlIGltcG9uZXIgdW5hIHBlbmEgaW5mZXJpb3IgYSBsYSBkZWwgaHVydG8gY29uc3VtYWRvLgogICAgCiAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRW5mb3F1ZSBqdXJpc3BydWRlbmNpYWwgeSBmaW5hbGlkYWRlcyBkZSBsYSBwZW5hCiAgICBwIExhIENvcnRlIFN1cHJlbWEgZGUgSnVzdGljaWEgaGEgaW5zaXN0aWRvIGVuIHF1ZSBsYSBmaWphY2nDs24gZGUgbGEgcGVuYSBkZWJlIGJhc2Fyc2UgZW4gdW5hIHZhbG9yYWNpw7NuIHJpZ3Vyb3NhIGRlIGxvcyBoZWNob3MgeSBsYXMgcHJ1ZWJhcywgZXZpdGFuZG8gYXByZWNpYWNpb25lcyBzdWJqZXRpdmFzIG8ganVpY2lvcyBtb3JhbGVzIGRlbCBqdWV6LgogICAgcC5tYi01IExhIHBlbmEsIGNvbmZvcm1lIGFsIGFydMOtY3VsbyA0IGRlbCBDw7NkaWdvIFBlbmFsLCBkZWJlIGN1bXBsaXIgdmFyaWFzIGZ1bmNpb25lczoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi00CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICAuYmctY29sb3ItOC5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLmgtMTAwCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8yMy5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIFByZXZlbmNpw7NuIGdlbmVyYWwgKGRpc3VhZGlyIGEgbGEgc29jaWVkYWQpCgogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgLmJnLWNvbG9yLTgucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5oLTEwMAogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvMjMuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBQcmV2ZW5jacOzbiBlc3BlY2lhbCAoZXZpdGFyIGxhIHJlaW5jaWRlbmNpYSkKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci04LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIzLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgUmV0cmlidWNpw7NuIGp1c3RhCiAgICAKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTQKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci04LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIzLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgUmVpbnNlcmNpw7NuIHNvY2lhbAoKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMAogICAgICAgIC5iZy1jb2xvci04LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikuaC0xMDAKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIzLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgUHJvdGVjY2nDs24gZGVsIGNvbmRlbmFkbwogICAgCiAgICBwLm1iLTQgRmlqYXIgbGEgcGVuYSBlcyB1biBlamVyY2ljaW8ganVyw61kaWNvIHF1ZSBleGlnZSB2YWxvcmFjacOzbiBpbnRlZ3JhbCwgdGFudG8gZGVsIGhlY2hvIGRlbGljdGl2byBjb21vIGRlIGxhcyBjaXJjdW5zdGFuY2lhcyBwZXJzb25hbGVzIGRlbCBhdXRvci4gU3UgYWRlY3VhZGEgYXBsaWNhY2nDs24gZ2FyYW50aXphIHF1ZSBsYSByZXNwdWVzdGEgcGVuYWwgc2VhIGp1c3RhLCBwcm9wb3JjaW9uYWwgeSByZXNwZXR1b3NhIGRlIGxvcyBkZXJlY2hvcyBmdW5kYW1lbnRhbGVzLCBlbiBjb25zb25hbmNpYSBjb24gdW5hIHNvY2llZGFkIGRlbW9jcsOhdGljYSB5IGdhcmFudGlzdGEuCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNy5tYi1sZy01CiAgICAgIC5weC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5tYi0zLm1iLWxnLTAKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIEV4Y2x1c2nDs24gZGUgbGEgcHVuaWJpbGlkYWQgeSBleHRpbmNpw7NuIGRlIGxhIGFjY2nDs24gcGVuYWwKICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgU2UgaW52aXRhIGEgbGVlciBlbCBkb2N1bWVudG8gRXhjbHVzacOzbiBkZSBsYSBwdW5pYmlsaWRhZCB5IGV4dGluY2nDs24gZGUgbGEgYWNjacOzbiBwZW5hbCwgZG9uZGUgc2UgYWJvcmRhIGVsIGFuw6FsaXNpcyBkZSBsb3MgbMOtbWl0ZXMgYSBsYSBpbXBvc2ljacOzbiBkZSBzYW5jaW9uZXMgZW4gZWwgRGVyZWNobyBQZW5hbCBjb2xvbWJpYW5vLiBFc3RlIG1hdGVyaWFsIG9mcmVjZSBleHBsaWNhY2lvbmVzIGRldGFsbGFkYXMsIGVqZW1wbG9zIGNvbmNyZXRvcyB5IHJlZmVyZW5jaWFzIG5vcm1hdGl2YXMuCiAgICAKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b18xLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBFeGNsdXNpw7NuIGRlIGxhIHB1bmliaWxpZGFkIHkgZXh0aW5jacOzbiBkZSBsYSBhY2Npw7NuIHBlbmFsLgogICAgCiAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8yNC5wbmcnLCBhbHQ9JycpCiAgICAKICAgICAgICAgIAoKCgoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuYWN0aXZpZGFkLmJnLWNvbG9yLWFjdGl2aWRhZAogICAgICAucC00LnAtbWQtNQogICAgICAgICNBY3RpdmlkYWQgICAgICAgICAgICAgICAgCiAgICAgICAgICA8QWN0aXZpZGFkIDpjdWVzdGlvbmFyaW89ImN1ZXN0aW9uYXJpbyIvPgoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cDovL3d3dy5zZWNyZXRhcmlhc2VuYWRvLmdvdi5jby9zZW5hZG8vYmFzZWRvYy9sZXlfMDU5OV8yMDAwLmh0bWwgICIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEVsIENvbmdyZXNvIGRlIGxhIFJlcMO6YmxpY2EgZGUgQ29sb21iaWEuICgyMDAwKS4gTGV5IDU5OSBkZSAyMDAwIFBvciBsYSBjdWFsIHNlIGV4cGlkZSBlbCBDw7NkaWdvIFBlbmFsIGFydMOtY3Vsb3MgMzQgYWwgNTMuICAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHA6Ly93d3cuc2VjcmV0YXJpYXNlbmFkby5nb3YuY28vc2VuYWRvL2Jhc2Vkb2MvbGV5XzA1OTlfMjAwMC5odG1sICIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEVsIENvbmdyZXNvIGRlIGxhIFJlcMO6YmxpY2EgZGUgQ29sb21iaWEuICgyMDAwKS4gTGV5IDU5OSBkZSAyMDAwIFBvciBsYSBjdWFsIHNlIGV4cGlkZSBlbCBDw7NkaWdvIFBlbmFsIGFydMOtY3Vsb3MgNjMgYWwgNjhBLiAgCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3Lm1pbmp1c3RpY2lhLmdvdi5jby9TYWxhLWRlLXByZW5zYS9QdWJsaWNhY2lvbmVzTWluSnVzdGljaWEvQ2FydGlsbGElMjBTdWJyb2dhZG9zJTIwUGVuYWxlcy5wZGYgIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgTWluSnVzdGljaWEgKCAyMDE0KSBTVUJST0dBRE9TIFBFTkFMRVMsIE1FQ0FOSVNNT1MgU1VTVElUVVRJVk9TIERFIFBFTkEKICAgICAgICAgICAgICBZIFZJR0lMQU5DSUEgRUxFQ1RSw5NOSUNBIEVOIEVMIFNJU1RFTUEgUEVOQUwgQ09MT01CSUFOTyAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0id3d3LnJlZGFseWMub3JnL3BkZi83MjAvNzIwNDU4NDQwMDQucGRmICAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBEdXLDoW4gTWlnbGlhcmRpLCBNLiwgKDIwMTUpLiBDb25zdGl0dWNpw7NuIHBlbmFsIHkgdGVvcsOtYSBkZSBsYSBwZW5hOiBhcHVudGVzIHNvYnJlIHVuYSByZWxhY2nDs24gbmVjZXNhcmlhIHkgcHJvcHVlc3RhIHBhcmEgdW4gcG9zaWJsZSBjb250ZW5pZG8gZGVzZGUgbGEgcHJldmVuY2nDs24gZXNwZWNpYWwuIERpa2Fpb24gLCAyNCAoMiksIDI4Mi0zMDYuIAogICAgICAgICAgIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8teXQuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9Y3FVYTBpdXktRFUiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBDYW5vLCBKLiAoMjAyMSwgMzAgZGUgYWdvc3RvKS4gSG9taWNpZGlvIHkgY2lyY3Vuc3RhbmNpYXMgZGUgYSBncmF2ZWRhZCBwdW5pdGl2YSBBcnQuIDEwMywgMTAzQSB5IDEwNCBDw7NkaWdvIFBlbmFsIENvbG9tYmlhbm8gW1bDrWRlb10uIFlvdVR1YmUuIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1rUDJ5N2c2ZTVmRSAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBHZXNtZXBvbC4gKDIwMTUsIDI4IGRlIGFnb3N0bykuIExhIHN1c3BlbnNpw7NuIHkgc3VzdGl0dWNpw7NuIGRlIGxhcyBwZW5hcyBbVsOtZGVvXS4gWW91VHViZS4gCgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}